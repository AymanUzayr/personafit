"""
Test script to check if PersonaFit components work correctly
"""
import sys
import traceback

def test_imports():
    """Test if all required modules can be imported"""
    print("Testing imports...")
    
    try:
        import streamlit as st
        print("‚úì streamlit imported successfully")
    except Exception as e:
        print(f"‚úó streamlit import failed: {e}")
        return False
    
    try:
        import pandas as pd
        print("‚úì pandas imported successfully")
    except Exception as e:
        print(f"‚úó pandas import failed: {e}")
        return False
    
    try:
        import numpy as np
        print("‚úì numpy imported successfully")
    except Exception as e:
        print(f"‚úó numpy import failed: {e}")
        return False
    
    try:
        from sklearn.ensemble import RandomForestRegressor
        print("‚úì scikit-learn imported successfully")
    except Exception as e:
        print(f"‚úó scikit-learn import failed: {e}")
        return False
    
    try:
        import plotly.express as px
        print("‚úì plotly imported successfully")
    except Exception as e:
        print(f"‚úó plotly import failed: {e}")
        return False
    
    try:
        from scipy import stats
        from scipy.signal import find_peaks
        print("‚úì scipy imported successfully")
    except Exception as e:
        print(f"‚úó scipy import failed: {e}")
        return False
    
    try:
        from groq import Groq
        print("‚úì groq imported successfully")
    except Exception as e:
        print(f"‚úó groq import failed: {e}")
        return False
    
    return True

def test_database():
    """Test database functionality"""
    print("\nTesting database...")
    
    try:
        from database import DatabaseManager, create_tables
        print("‚úì database module imported successfully")
    except Exception as e:
        print(f"‚úó database import failed: {e}")
        traceback.print_exc()
        return False
    
    try:
        create_tables()
        print("‚úì database tables created successfully")
    except Exception as e:
        print(f"‚úó database table creation failed: {e}")
        traceback.print_exc()
        return False
    
    try:
        db = DatabaseManager()
        print("‚úì database manager created successfully")
        db.session.close()
    except Exception as e:
        print(f"‚úó database manager creation failed: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_auth():
    """Test authentication functionality"""
    print("\nTesting authentication...")
    
    try:
        from auth import AuthManager
        print("‚úì auth module imported successfully")
    except Exception as e:
        print(f"‚úó auth import failed: {e}")
        traceback.print_exc()
        return False
    
    try:
        auth = AuthManager()
        print("‚úì auth manager created successfully")
    except Exception as e:
        print(f"‚úó auth manager creation failed: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_health_prediction():
    """Test health prediction functionality"""
    print("\nTesting health prediction...")
    
    try:
        from health_prediction import HealthPredictor
        print("‚úì health_prediction module imported successfully")
    except Exception as e:
        print(f"‚úó health_prediction import failed: {e}")
        traceback.print_exc()
        return False
    
    try:
        predictor = HealthPredictor()
        print("‚úì health predictor created successfully")
    except Exception as e:
        print(f"‚úó health predictor creation failed: {e}")
        traceback.print_exc()
        return False
    
    return True

def main():
    """Run all tests"""
    print("PersonaFit Component Test")
    print("=" * 40)
    
    all_passed = True
    
    # Test imports
    if not test_imports():
        all_passed = False
    
    # Test database
    if not test_database():
        all_passed = False
    
    # Test auth
    if not test_auth():
        all_passed = False
    
    # Test health prediction
    if not test_health_prediction():
        all_passed = False
    
    print("\n" + "=" * 40)
    if all_passed:
        print("üéâ All tests passed! The app should work correctly.")
    else:
        print("‚ùå Some tests failed. Please check the errors above.")
    
    return all_passed

if __name__ == "__main__":
    main() 